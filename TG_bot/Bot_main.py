import logging
import os
import json
import importlib
import traceback
import asyncio
from telegram.ext import ApplicationBuilder, CommandHandler
from apscheduler.schedulers.asyncio import AsyncIOScheduler
# –î–æ–±–∞–≤—å—Ç–µ –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞:
import sys
import os

# –î–æ–±–∞–≤—å—Ç–µ –ø–æ—Å–ª–µ load_functions():
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π
def load_functions(app):
    current_dir = os.path.dirname(os.path.abspath(__file__))
    for file in os.listdir(current_dir):
        if file.startswith("function") and file.endswith(".py"):
            module_name = file[:-3]
            try:
                # –í—ã–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω
                if module_name in sys.modules:
                    del sys.modules[module_name]
                
                module = importlib.import_module(module_name)
                if hasattr(module, "COMMANDS"):
                    for command_name, handler in module.COMMANDS:
                        app.add_handler(CommandHandler(command_name, handler))
                        logging.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: /{command_name}")
            except Exception as e:
                logging.error(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å {module_name}: {e}")
                logging.error(traceback.format_exc())
# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler("bot.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)

# === –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ ===
with open("config.json", "r", encoding="utf-8") as f:
    config = json.load(f)

BOT_TOKEN = config["BOT_TOKEN"]
CHAT_ID = int(config["CHAT_ID"])
AUTOTRACK_SETTINGS = config.get("autotrack", {})
DAILY_TRACKOZON_SETTINGS = config.get("daily_trackozon", {})

# === –ö–æ–º–∞–Ω–¥—ã ===
async def start(update, context):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/help ‚Äî –ø–æ–º–æ—â—å\n"
        "/test ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞\n"
        "/trackozon ‚Äî —Å—Ç–∞—Ç—É—Å –ø–æ—Å—ã–ª–∫–∏ OZON\n"
        "/hello –≤–∫–ª ‚Äî –≤–∫–ª—é—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
        "/hello –≤—ã–∫–ª ‚Äî –≤—ã–∫–ª—é—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"
    )

async def help_command(update, context):
    await update.message.reply_text(
        "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/help ‚Äî –ø–æ–º–æ—â—å\n"
        "/test ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞\n"
        "/trackozon ‚Äî —Å—Ç–∞—Ç—É—Å –ø–æ—Å—ã–ª–∫–∏ OZON\n"
        "/hello –≤–∫–ª ‚Äî –≤–∫–ª—é—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
        "/hello –≤—ã–∫–ª ‚Äî –≤—ã–∫–ª—é—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"
    )

# === –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ===
async def send_trackozon(bot, chat_id):
    try:
        await bot.send_message(chat_id=chat_id, text="/trackozon")
        logging.info(f"‚úÖ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: /trackozon –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except Exception as e:
        logging.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")

# === –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ===
async def on_startup(app):
    scheduler = AsyncIOScheduler(timezone="Europe/Moscow")

    # –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞
    if DAILY_TRACKOZON_SETTINGS.get("enabled", False):
        scheduler.add_job(
            lambda: asyncio.create_task(send_trackozon(app.bot, CHAT_ID)),
            'cron',
            hour=DAILY_TRACKOZON_SETTINGS.get("hour", 10),
            minute=DAILY_TRACKOZON_SETTINGS.get("minute", 0)
        )
        logging.info(f"‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {DAILY_TRACKOZON_SETTINGS['hour']}:{DAILY_TRACKOZON_SETTINGS['minute']:02d}.")

    # –ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞
    if AUTOTRACK_SETTINGS.get("enabled", False):
        scheduler.add_job(
            lambda: asyncio.create_task(send_trackozon(app.bot, CHAT_ID)),
            'interval',
            hours=AUTOTRACK_SETTINGS.get("hours", 0),
            minutes=AUTOTRACK_SETTINGS.get("minutes", 0)
        )
        logging.info(f"‚úÖ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ! –ò–Ω—Ç–µ—Ä–≤–∞–ª: {AUTOTRACK_SETTINGS.get('hours', 0)} —á. {AUTOTRACK_SETTINGS.get('minutes', 0)} –º–∏–Ω.")
    else:
        logging.info("‚è∏Ô∏è –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ.")

    scheduler.start()
    logging.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω!")

# === –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–∞–Ω–¥ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–π ===
def load_functions(app):
    current_dir = os.path.dirname(os.path.abspath(__file__))
    for file in os.listdir(current_dir):
        if file.startswith("function") and file.endswith(".py"):
            module_name = file[:-3]
            try:
                module = importlib.import_module(module_name)
                if hasattr(module, "COMMANDS"):
                    for command_name, handler in module.COMMANDS:
                        app.add_handler(CommandHandler(command_name, handler))
                        logging.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: /{command_name}")
            except Exception as e:
                logging.error(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å {module_name}: {e}")
                logging.error(traceback.format_exc())

# === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ===
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).post_init(on_startup).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))

    load_functions(app)

    logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    app.run_polling()

if __name__ == "__main__":
    main()

# –î–æ–±–∞–≤—å –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞:

async def execute_command(command: str):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –Ω–∞–ø—Ä—è–º—É—é"""
    mock_update = Update(update_id=0, message=Message(
        message_id=0,
        date=datetime.now(),
        chat=Chat(id=CHAT_ID, type='private'),
        text=command
    ))
    
    if command == "/trackozon":
        await trackozon_handler(mock_update, None)
    elif command == "/hello_now":
        await hello_now_handler(mock_update, None)
    # ... –¥–æ–±–∞–≤—å –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã