import tkinter as tk
import requests
import json
import threading
from importlib import import_module
from tkinter import messagebox

# –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
with open("config.json", "r", encoding="utf-8") as f:
    config = json.load(f)
BOT_TOKEN = config["BOT_TOKEN"]
CHAT_ID = config["CHAT_ID"]

class BotController:
    def __init__(self, root):
        self.root = root
        self.root.title("OZON Bot Controller")
        self.root.geometry("600x500")
        self.root.configure(bg="#f0f8ff")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        tk.Label(root, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Ozon –ë–æ—Ç–æ–º", 
                font=("Arial", 16, "bold"), bg="#f0f8ff").pack(pady=10)
        
        # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π
        functions_frame = tk.LabelFrame(root, text="–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏", 
                                      bg="#f0f8ff", font=("Arial", 12))
        functions_frame.pack(pady=10, padx=15, fill="x")
        
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π
        self.load_functions(functions_frame)
        
        # –õ–æ–≥ –¥–µ–π—Å—Ç–≤–∏–π
        log_frame = tk.LabelFrame(root, text="–ñ—É—Ä–Ω–∞–ª –¥–µ–π—Å—Ç–≤–∏–π", 
                                bg="#f0f8ff", font=("Arial", 12))
        log_frame.pack(pady=10, padx=15, fill="both", expand=True)
        
        self.log = tk.Text(log_frame, height=10, state='disabled', bg="white")
        self.log.pack(pady=10, padx=10, fill="both", expand=True)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–∞
        tk.Button(root, text="–û—á–∏—Å—Ç–∏—Ç—å –∂—É—Ä–Ω–∞–ª", command=self.clear_log,
                 bg="#ff6b6b", fg="white").pack(pady=5)
    
    def load_functions(self, frame):
        """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –º–æ–¥—É–ª–µ–π function*"""
        try:
            for i in range(1, 10):  # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –¥–æ 9 —Ñ—É–Ω–∫—Ü–∏–π
                module_name = f"function{i}"
                try:
                    module = import_module(module_name)
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏
                    btn = tk.Button(frame, text=f"‚ö° –ó–∞–ø—É—Å—Ç–∏—Ç—å function{i}",
                                   command=lambda m=module: self.execute_function(m),
                                   bg="#4ecdc4", fg="white", font=("Arial", 10))
                    btn.pack(pady=5, padx=10, fill="x")
                    
                except ImportError:
                    break  # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º, –∫–æ–≥–¥–∞ –º–æ–¥—É–ª–∏ –∑–∞–∫–æ–Ω—á–∞—Ç—Å—è
                    
        except Exception as e:
            self.add_log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π: {str(e)}")
    
    def execute_function(self, module):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –º–æ–¥—É–ª—è"""
        threading.Thread(target=self._run_function, args=(module,), daemon=True).start()
    
    def _run_function(self, module):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            func_name = getattr(module, "COMMANDS")[0][0]
            self.add_log(f"üöÄ –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏: {func_name}")
            
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
            try:
                result_func = getattr(module, f"get_{func_name}_result", None)
                if result_func:
                    result = result_func()
                    self._send_message(result)
                    self.add_log(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {result}")
                else:
                    # –ï—Å–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                    handler = getattr(module, f"{func_name}_handler")
                    self._send_telegram_command(f"/{func_name}")
                    self.add_log(f"üì® –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: /{func_name}")
            except Exception as e:
                self.add_log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {str(e)}")
                
        except Exception as e:
            self.add_log(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
    
    def _send_message(self, text):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        requests.post(url, data={
            "chat_id": CHAT_ID,
            "text": text,
            "parse_mode": "HTML"
        })
    
    def _send_telegram_command(self, command):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –≤ Telegram"""
        url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        requests.post(url, data={
            "chat_id": CHAT_ID,
            "text": command
        })
    
    def add_log(self, message):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥"""
        self.root.after(0, self._update_log, message)
    
    def _update_log(self, message):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ª–æ–≥ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞)"""
        self.log.config(state='normal')
        self.log.insert('end', message + "\n")
        self.log.see('end')
        self.log.config(state='disabled')
    
    def clear_log(self):
        """–û—á–∏—â–∞–µ—Ç –ª–æ–≥"""
        self.log.config(state='normal')
        self.log.delete(1.0, 'end')
        self.log.config(state='disabled')

if __name__ == "__main__":
    root = tk.Tk()
    app = BotController(root)
    root.mainloop()